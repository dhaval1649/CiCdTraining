# This is a basic workflow to help you get started with Actions

name: Development

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      #- name: Caching
      #  uses: actions/cache@v2
       # with:
         # path: ~/.nuget/packages
         # key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
         # restore-keys: ${{ runner.os }}-nuget-   
    
       # if: steps.cache.outputs.cache-hit != 'true'
      # dotnet build and publish
      - name: Build with dotnet
        run: dotnet build --configuration Release
      - name: dotnet publish
        run: |
          dotnet publish -c Release  -o cicdtraining 
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: CiCdTraining publish
          run:  cd CiCdTraining/ && dotnet publish
          path: /home/runner/work/CiCdTraining/bin/Debug/netcoreapp3.1/publish/
